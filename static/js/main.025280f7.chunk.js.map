{"version":3,"sources":["components/LearnRoute.module.scss","components/Loading.module.scss","utils.js","tips.js","components/MainRoute.js","components/LearnRoute.js","components/Loading.js","App.js","reportWebVitals.js","index.js","components/MainRoute.module.scss"],"names":["module","exports","equalsIgnoreAccentAndCaseAndNonLetters","s1","s2","accents","cleanup","s","replaceAll","removeNonLetters","res","polish","normal","replacePolishAccent","toLowerCase","getAcceptableAnswers","names","cartesian","a","reduce","b","flatMap","d","map","e","flat","helper","depth","length","Array","fill","name","filter","arr","Set","size","join","preloadImage","src","Promise","r","image","Image","onload","onerror","tips","randomTip","array","Math","floor","random","MainRoute","sectionData","useState","isPreloadDone","setIsPreloadDone","tip","setTip","useEffect","className","styles","body","navbar","title","tipBar","tipBarContent","mainContainer","main","to","sectionLink","sectionLinkText","section","codeName","friendlyName","optimize","optimizeButton","onClick","event","preventDefault","imageUrls","items","item","imageUrl","all","x","then","footer","LearnRoute","sectionCodeName","useParams","toSolve","setToSolve","solved","setSolved","isShowingSolution","setIsShowingSolution","isTextCorrect","setIsTextCorrect","userAnswer","setUserAnswer","userAnswerInput","useRef","current","itemWithSectionName","sectionFriendlyName","setShuffledToSolve","arrayToShuffle","randomIndex","currentIndex","shuffled","find","next","handleGoNext","isSuccess","slice","focus","window","history","go","handleShowAnswer","imageGrid","questImageContainer","alt","answerImageContainer","answerForm","onSubmit","answerText","isCorrect","some","ref","type","input","onChange","target","value","good","bad","id","max","Loading","loadingText","setLoadingText","container","subtext","App","sections","setSections","setSectionData","error","setError","parseRows","text","tbody","DOMParser","parseFromString","querySelector","from","children","fetch","data","row","querySelectorAll","elem","textContent","catch","ex","console","log","sectionSheetName","rs","sheets","sheet","rowElems","getAttribute","replace","innerText","elementLists","i","path","exact","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.025280f7.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"imageGrid\":\"LearnRoute_imageGrid__39iJh\",\"questImageContainer\":\"LearnRoute_questImageContainer__3VCF3\",\"answerImageContainer\":\"LearnRoute_answerImageContainer__35uX4\",\"input\":\"LearnRoute_input__3nB-G\",\"result\":\"LearnRoute_result__3Yo_M\",\"good\":\"LearnRoute_good__EVANt LearnRoute_result__3Yo_M\",\"bad\":\"LearnRoute_bad__1tRC3 LearnRoute_result__3Yo_M\",\"answerForm\":\"LearnRoute_answerForm__28i-N\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Loading_container__1qVio\",\"tip\":\"Loading_tip__3zvXX\",\"subtext\":\"Loading_subtext__3Iejr\"};","// adapted from and edited https://stackoverflow.com/a/2450976/4541480\r\nexport function shuffled(arrayToShuffle) {\r\n  const array = [...arrayToShuffle];\r\n  let currentIndex = array.length, randomIndex;\r\n\r\n  // While there remain elements to shuffle...\r\n  while (currentIndex !== 0) {\r\n\r\n    // Pick a remaining element...\r\n    randomIndex = Math.floor(Math.random() * currentIndex);\r\n    currentIndex--;\r\n\r\n    // And swap it with the current element.\r\n    [array[currentIndex], array[randomIndex]] = [\r\n      array[randomIndex], array[currentIndex]];\r\n  }\r\n\r\n  return array;\r\n}\r\n\r\nexport function randomElement(array) {\r\n  return array[Math.floor(Math.random() * array.length)];\r\n}\r\n\r\nexport function equalsIgnoreAccentAndCaseAndNonLetters(s1, s2) {\r\n  const accents = [['ą', 'a'], ['ć', 'c'], ['ę', 'e'], ['ł', 'l'], ['ń', 'n'], ['ó', 'o'], ['ś', 's'], ['ź', 'z'], ['ż', 'z']];\r\n\r\n  const replacePolishAccent = (s) => {\r\n    let res = s;\r\n    for (const [polish, normal] of accents) {\r\n      res = res.replaceAll(polish, normal);\r\n    }\r\n    return res;\r\n  };\r\n\r\n  const removeNonLetters = (s) => s.replaceAll(/[^a-z ]/g, '');\r\n\r\n  const cleanup = (s) => removeNonLetters(replacePolishAccent(s.toLowerCase()));\r\n\r\n  return cleanup(s1) === cleanup(s2);\r\n}\r\n\r\n// do NOT touch this function - if it works, don't fix it\r\nfunction getAcceptableAnswers(names) {\r\n  const cartesian = (...a) => a.reduce((a, b) => a.flatMap(d => b.map(e => [d, e].flat())));\r\n  const helper = (a, depth) => {\r\n    if (depth > names.length) return a;\r\n    return helper([...a, ...cartesian(...Array(depth).fill(names))], depth + 1);\r\n  };\r\n  return helper(names.map(name => [name]), 2).filter(arr => new Set(arr).size === arr.length).map(arr => arr.join(' '));\r\n}\r\n\r\nexport function isAnswerCorrect(currentItem, answerText) {\r\n  return getAcceptableAnswers(currentItem.names).some(name => equalsIgnoreAccentAndCaseAndNonLetters(name, answerText));\r\n}\r\n\r\nexport const preloadImage = (src) =>\r\n    new Promise(r => {\r\n      const image = new Image();\r\n      image.onload = r;\r\n      image.onerror = r;\r\n      image.src = src;\r\n    });\r\n","import { randomElement } from './utils'\r\n\r\nexport const tips = [\r\n  'sen sprzyja zapamiętywaniu',\r\n  'pij dwa litry wody dziennie',\r\n  'organizm wymaga regularnego jedzenia',\r\n]\r\n\r\nexport const randomTip = () => randomElement(tips)","import { Link } from 'react-router-dom'\r\nimport { useEffect, useState } from 'react'\r\nimport { preloadImage } from '../utils'\r\nimport styles from './MainRoute.module.scss'\r\nimport { randomTip } from '../tips'\r\n\r\nexport default function MainRoute ({ sectionData }) {\r\n  const [isPreloadDone, setIsPreloadDone] = useState(null)\r\n  const [tip, setTip] = useState(null)\r\n\r\n  const handlePreloadImages = (event) => {\r\n    event.preventDefault()\r\n    setIsPreloadDone(false)\r\n\r\n    const imageUrls = sectionData.flatMap(\r\n      section => section.items.map(item => item.imageUrl))\r\n    Promise.all(imageUrls.map(x => preloadImage(x))).then(() => {\r\n      setIsPreloadDone(true)\r\n    })\r\n  }\r\n\r\n  useEffect(() => {\r\n    setTip(randomTip())\r\n  }, [])\r\n\r\n  return (\r\n    <div className={styles.body}>\r\n      <nav className={styles.navbar}>\r\n        <h1 className={styles.title}>Point Game</h1>\r\n      </nav>\r\n      <div className={styles.tipBar}>\r\n        <div className={styles.tipBarContent}>protip — {tip}</div>\r\n      </div>\r\n      <div className={styles.mainContainer}>\r\n        <main className={styles.main}>\r\n          <Link to=\"/train/all\" className={styles.sectionLink}>\r\n            <span className={styles.sectionLinkText}>Wszystkie działy</span>\r\n          </Link>\r\n          {sectionData ? sectionData.map(section =>\r\n            <Link key={section.codeName} className={styles.sectionLink}\r\n                  to={`/train/${section.codeName}`}>\r\n              <span\r\n                className={styles.sectionLinkText}>{section.friendlyName}</span>\r\n            </Link>,\r\n          ) : ''}\r\n          <section className={styles.optimize}>\r\n            <div>Jeśli nie szkoda ci internetu to dla płynniejszego działania\r\n              aplikacji możesz na zapas pobrać z góry wszystkie\r\n              zdjęcia do pamięci podręcznej\r\n            </div>\r\n            <button className={styles.optimizeButton}\r\n                    onClick={handlePreloadImages}>\r\n              Wczytaj obrazki\r\n            </button>\r\n            {isPreloadDone === false ? <div>Wczytywanie obrazków...</div> : ''}\r\n            {isPreloadDone === true ? <div>Obrazki wczytane</div> : ''}\r\n          </section>\r\n        </main>\r\n      </div>\r\n      <footer className={styles.footer}>\r\n        <div>Copyright Nicofisi 2021 | Wersja 2.4.1</div>\r\n      </footer>\r\n    </div>\r\n  )\r\n}\r\n","import {useEffect, useRef, useState} from 'react';\r\nimport {Link, useParams} from 'react-router-dom';\r\nimport {isAnswerCorrect, preloadImage, shuffled} from '../utils';\r\nimport styles from './LearnRoute.module.scss';\r\n\r\nexport default function LearnRoute({sectionData}) {\r\n  const {sectionCodeName} = useParams();\r\n\r\n  const [toSolve, setToSolve] = useState(null);\r\n  const [solved, setSolved] = useState(null);\r\n  const [isShowingSolution, setIsShowingSolution] = useState(null);\r\n  const [isTextCorrect, setIsTextCorrect] = useState(null);\r\n  const [userAnswer, setUserAnswer] = useState('');\r\n\r\n  const userAnswerInput = useRef(null);\r\n\r\n  const [current] = toSolve ?? [];\r\n\r\n  // initialize component when sectionData or URL changes\r\n  useEffect(() => {\r\n    const itemWithSectionName = (section) => (item) => {\r\n      return {...item, sectionFriendlyName: section.friendlyName};\r\n    };\r\n\r\n    const setShuffledToSolve = (arr) => {\r\n      setToSolve(shuffled(arr));\r\n    };\r\n\r\n    if (sectionCodeName === 'all') {\r\n      setShuffledToSolve(sectionData.flatMap(section => section.items.map(itemWithSectionName(section))));\r\n    } else {\r\n      const section = sectionData.find(section => section.codeName === sectionCodeName);\r\n      if (section == null) {\r\n        setToSolve(null);\r\n        setSolved(null);\r\n        return;\r\n      }\r\n      setShuffledToSolve(section.items.map(itemWithSectionName(section)));\r\n    }\r\n    setSolved([]);\r\n    setIsTextCorrect(null);\r\n  }, [sectionCodeName, sectionData]);\r\n\r\n  // pre-fetch the next image\r\n  useEffect(() => {\r\n    if (toSolve) {\r\n      const next = toSolve[1];\r\n      if (next) {\r\n        preloadImage(next.imageUrl);\r\n      }\r\n    }\r\n  }, [toSolve]);\r\n\r\n  const handleGoNext = (event, isSuccess) => {\r\n    if (event) event.preventDefault();\r\n    if (isSuccess) {\r\n      setToSolve(toSolve.slice(1));\r\n      setSolved([...solved, current]);\r\n    } else {\r\n      if (toSolve.length > 1) {\r\n        setToSolve([...toSolve.slice(1, 2), current, ...toSolve.slice(2)]);\r\n      }\r\n    }\r\n    setIsShowingSolution(false);\r\n    setIsTextCorrect(null);\r\n    setUserAnswer('');\r\n    userAnswerInput.current.focus();\r\n  };\r\n  const handleAmRight = (event) => handleGoNext(event, true);\r\n  const handleAmWrong = (event) => handleGoNext(event, false);\r\n\r\n  if (toSolve == null) {\r\n    return (\r\n        <div>\r\n          Nie istnieje taka sekcja, wróć do <Link to=\"/\">strony głównej</Link>\r\n        </div>\r\n    );\r\n  }\r\n\r\n  if (current == null) {\r\n    return (\r\n        <div>\r\n          Brawo, zdałxś!!!!!!!! <button onClick={() => window.history.go(0)}> Zacznij od nowa</button> bądź\r\n          <Link to=\"/\"> przejdź do menu głównego</Link>, ewentualnie idź spać\r\n        </div>\r\n    );\r\n  }\r\n\r\n  const handleShowAnswer = (event) => {\r\n    if (event) event.preventDefault();\r\n    setIsShowingSolution(true);\r\n  };\r\n\r\n  const handleSubmitTextAnswer = (event) => {\r\n    event.preventDefault();\r\n    const isCorrect = isAnswerCorrect(current, userAnswer);\r\n    if (userAnswer !== '')\r\n      setIsTextCorrect(isCorrect);\r\n    else\r\n      handleShowAnswer();\r\n    if (isCorrect) {\r\n      if (isTextCorrect) { // if clicked enter again\r\n        handleGoNext(null, true);\r\n      }\r\n      handleShowAnswer();\r\n    }\r\n  };\r\n\r\n  const handleAnswerTextChanged = (event) => {\r\n    // hide 'correct' or 'incorrect' when the text input changes\r\n    setIsTextCorrect(null);\r\n    setUserAnswer(event.target.value);\r\n  };\r\n\r\n  return (\r\n      <div>\r\n        <div className={styles.imageGrid}>\r\n          <div className={styles.questImageContainer}>\r\n            <img src={current.imageUrl} alt=\"pytanie\"/>\r\n          </div>\r\n          {isShowingSolution ?\r\n              <div className={styles.answerImageContainer}>\r\n                {current.names.join(' | ')}\r\n              </div> :\r\n              ''}\r\n        </div>\r\n        <div>\r\n          {isShowingSolution ?\r\n              <>\r\n                <button onClick={handleAmRight}>Wiem</button>\r\n                <button onClick={handleAmWrong}>Nie wiem</button>\r\n              </> :\r\n              <>\r\n                <button onClick={handleShowAnswer}>Pokaż odpowiedź</button>\r\n              </>\r\n          }\r\n\r\n          <form className={styles.answerForm} onSubmit={handleSubmitTextAnswer}>\r\n            <input ref={userAnswerInput} type=\"text\" name=\"answer\" className={styles.input} onChange={handleAnswerTextChanged}\r\n                   value={userAnswer}/>\r\n            <button type=\"submit\">Sprawdź</button>\r\n          </form>\r\n          {isTextCorrect === true ? <span className={styles.good}>dobrze</span> : ''}\r\n          {isTextCorrect === false ? <span className={styles.bad}>źle</span> : ''}\r\n        </div>\r\n        <div>\r\n          wiesz: {solved.length} | nie wiesz: {toSolve.length}\r\n        </div>\r\n        <div>\r\n          <progress id=\"file\" max={solved.length + toSolve.length} value={solved.length} />\r\n        </div>\r\n      </div>\r\n  );\r\n}\r\n","import styles from './Loading.module.scss'\r\nimport { useEffect, useState } from 'react'\r\nimport { randomTip } from '../tips'\r\n\r\nexport default function Loading() {\r\n  const [loadingText, setLoadingText] = useState(null);\r\n\r\n  useEffect(() => {\r\n    setLoadingText(randomTip())\r\n  }, [])\r\n\r\n  return (\r\n    <div className={styles.container}>\r\n      <div className={styles.tip}>{loadingText}</div>\r\n      <div className={styles.subtext}>ładowanie</div>\r\n    </div>\r\n  )\r\n}","import './App.css'\r\nimport { useEffect, useState } from 'react'\r\nimport { HashRouter, Redirect, Route, Switch } from 'react-router-dom'\r\nimport MainRoute from './components/MainRoute'\r\nimport TrainRoute from './components/LearnRoute'\r\nimport Loading from './components/Loading'\r\n\r\nfunction App () {\r\n  const [sections, setSections] = useState(null)\r\n  const [sectionData, setSectionData] = useState(null)\r\n  const [error, setError] = useState(null)\r\n\r\n  const parseRows = (text) => {\r\n    const parser = new DOMParser()\r\n    const htmlDoc = parser.parseFromString(text, 'text/html')\r\n    const tbody = htmlDoc.querySelector('tbody')\r\n    return Array.from(tbody.children)\r\n  }\r\n\r\n  useEffect(() => {\r\n    fetch('/point-game/data/zzz_działy.html').\r\n      then((r) => r.text()).\r\n      then(text => {\r\n        const data = parseRows(text).map(row => {\r\n          const rowElems = Array.from(row.querySelectorAll('td'))\r\n          return rowElems.map(elem => elem.textContent)\r\n        })\r\n        setSections(data)\r\n      }).\r\n      catch(ex => {\r\n        console.log(ex)\r\n        setError('Nie udało się pobrać lub przetworzyć pliku zzz_działy.html')\r\n      })\r\n  }, [])\r\n\r\n  useEffect(() => {\r\n    if (sections)\r\n      Promise.all(sections.map(([, sectionSheetName]) => fetch(\r\n        `/point-game/data/${sectionSheetName}.html`))).\r\n        then(rs => Promise.all(rs.map(r => r.text()))).\r\n        then(sheets => {\r\n          return sheets.map(sheet => {\r\n              return parseRows(sheet).slice(1).map(row => {\r\n                const rowElems = Array.from(row.querySelectorAll('td'))\r\n                const imageUrl = rowElems[0].children.item(0).\r\n                  children.\r\n                  item(0).\r\n                  getAttribute('src').\r\n                  replace(/=w\\d+-h\\d+$/, '')\r\n                return {\r\n                  imageUrl,\r\n                  names: rowElems.slice(1).map(elem => elem.innerText),\r\n                }\r\n              })\r\n            },\r\n          )\r\n        }).\r\n        then(elementLists => {\r\n          return sections.map(([sectionCodeName, sectionFriendlyName], i) => {\r\n            return {\r\n              codeName: sectionCodeName,\r\n              friendlyName: sectionFriendlyName,\r\n              items: elementLists[i],\r\n            }\r\n          })\r\n        }).\r\n        then(data => {\r\n          setSectionData(data)\r\n        }).\r\n        catch(ex => {\r\n          console.log(ex)\r\n          setError(\r\n            'Nie udało się pobrać lub przetworzyć jednego z plików z fiszkami')\r\n        })\r\n  }, [sections])\r\n\r\n  console.log(sectionData)\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      {error ?? ''}\r\n      {sectionData ?\r\n        (<HashRouter>\r\n          <Switch>\r\n            <Route path=\"/\" exact>\r\n              <MainRoute sectionData={sectionData}/>\r\n            </Route>\r\n            <Route path=\"/train/:sectionCodeName\">\r\n              <TrainRoute sectionData={sectionData}/>\r\n            </Route>\r\n            <Redirect to=\"/\"/>\r\n          </Switch>\r\n        </HashRouter>) :\r\n        <Loading/>\r\n      }\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default App\r\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"body\":\"MainRoute_body__1IMBH\",\"navbar\":\"MainRoute_navbar__J4lt4\",\"title\":\"MainRoute_title__BwU7b\",\"tipBar\":\"MainRoute_tipBar__3rVah\",\"tipBarContent\":\"MainRoute_tipBarContent__4AkFP\",\"mainContainer\":\"MainRoute_mainContainer__L6es0\",\"main\":\"MainRoute_main__2oMFx\",\"sectionLink\":\"MainRoute_sectionLink__2sD9m\",\"sectionLinkText\":\"MainRoute_sectionLinkText__1pUoI\",\"optimize\":\"MainRoute_optimize__1ioBY\",\"optimizeButton\":\"MainRoute_optimizeButton__2stW2\",\"footer\":\"MainRoute_footer__3MhMp\"};"],"sourceRoot":""}