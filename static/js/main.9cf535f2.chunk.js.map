{"version":3,"sources":["components/LearnRoute.module.scss","utils.js","components/MainRoute.js","components/LearnRoute.js","App.js","reportWebVitals.js","index.js"],"names":["module","exports","equalsIgnoreAccentAndCaseAndNonLetters","s1","s2","accents","cleanup","s","replaceAll","removeNonLetters","res","polish","normal","replacePolishAccent","toLowerCase","getAcceptableAnswers","names","cartesian","a","reduce","b","flatMap","d","map","e","flat","helper","depth","length","Array","fill","name","filter","arr","Set","size","join","preloadImage","src","Promise","r","image","Image","onload","onerror","MainRoute","sectionData","useState","isPreloadDone","setIsPreloadDone","to","section","codeName","friendlyName","onClick","event","preventDefault","imageUrls","items","item","imageUrl","all","x","then","LearnRoute","sectionCodeName","useParams","toSolve","setToSolve","solved","setSolved","isShowingSolution","setIsShowingSolution","isTextCorrect","setIsTextCorrect","userAnswer","setUserAnswer","userAnswerInput","useRef","current","useEffect","itemWithSectionName","sectionFriendlyName","setShuffledToSolve","arrayToShuffle","randomIndex","array","currentIndex","Math","floor","random","shuffled","find","next","handleGoNext","isSuccess","slice","focus","window","history","go","handleShowAnswer","className","styles","imageGrid","questImageContainer","alt","answerImageContainer","answerForm","onSubmit","answerText","isCorrect","some","ref","type","input","onChange","target","value","good","bad","id","max","App","sections","setSections","setSectionData","parseRows","text","tbody","DOMParser","parseFromString","querySelector","from","children","fetch","data","row","querySelectorAll","elem","textContent","sectionSheetName","rs","sheets","sheet","rowElems","getAttribute","replace","innerText","elementLists","i","console","log","path","exact","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.9cf535f2.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"imageGrid\":\"LearnRoute_imageGrid__39iJh\",\"questImageContainer\":\"LearnRoute_questImageContainer__3VCF3\",\"answerImageContainer\":\"LearnRoute_answerImageContainer__35uX4\",\"input\":\"LearnRoute_input__3nB-G\",\"result\":\"LearnRoute_result__3Yo_M\",\"good\":\"LearnRoute_good__EVANt LearnRoute_result__3Yo_M\",\"bad\":\"LearnRoute_bad__1tRC3 LearnRoute_result__3Yo_M\",\"answerForm\":\"LearnRoute_answerForm__28i-N\"};","// adapted from and edited https://stackoverflow.com/a/2450976/4541480\r\nexport function shuffled(arrayToShuffle) {\r\n  const array = [...arrayToShuffle];\r\n  let currentIndex = array.length, randomIndex;\r\n\r\n  // While there remain elements to shuffle...\r\n  while (currentIndex !== 0) {\r\n\r\n    // Pick a remaining element...\r\n    randomIndex = Math.floor(Math.random() * currentIndex);\r\n    currentIndex--;\r\n\r\n    // And swap it with the current element.\r\n    [array[currentIndex], array[randomIndex]] = [\r\n      array[randomIndex], array[currentIndex]];\r\n  }\r\n\r\n  return array;\r\n}\r\n\r\nexport function equalsIgnoreAccentAndCaseAndNonLetters(s1, s2) {\r\n  const accents = [['ą', 'a'], ['ć', 'c'], ['ę', 'e'], ['ł', 'l'], ['ń', 'n'], ['ó', 'o'], ['ś', 's'], ['ź', 'z'], ['ż', 'z']];\r\n\r\n  const replacePolishAccent = (s) => {\r\n    let res = s;\r\n    for (const [polish, normal] of accents) {\r\n      res = res.replaceAll(polish, normal);\r\n    }\r\n    return res;\r\n  };\r\n\r\n  const removeNonLetters = (s) => s.replaceAll(/[^a-z ]/g, '');\r\n\r\n  const cleanup = (s) => removeNonLetters(replacePolishAccent(s.toLowerCase()));\r\n\r\n  return cleanup(s1) === cleanup(s2);\r\n}\r\n\r\n// do NOT touch this function - if it works, don't fix it\r\nfunction getAcceptableAnswers(names) {\r\n  const cartesian = (...a) => a.reduce((a, b) => a.flatMap(d => b.map(e => [d, e].flat())));\r\n  const helper = (a, depth) => {\r\n    if (depth > names.length) return a;\r\n    return helper([...a, ...cartesian(...Array(depth).fill(names))], depth + 1);\r\n  };\r\n  return helper(names.map(name => [name]), 2).filter(arr => new Set(arr).size === arr.length).map(arr => arr.join(' '));\r\n}\r\n\r\nexport function isAnswerCorrect(currentItem, answerText) {\r\n  return getAcceptableAnswers(currentItem.names).some(name => equalsIgnoreAccentAndCaseAndNonLetters(name, answerText));\r\n}\r\n\r\nexport const preloadImage = (src) =>\r\n    new Promise(r => {\r\n      const image = new Image();\r\n      image.onload = r;\r\n      image.onerror = r;\r\n      image.src = src;\r\n    });\r\n","import {Link} from 'react-router-dom';\r\nimport {useState} from 'react';\r\nimport {preloadImage} from '../utils';\r\n\r\nexport default function MainRoute({sectionData}) {\r\n  const [isPreloadDone, setIsPreloadDone] = useState(null);\r\n\r\n  const handlePreloadImages = (event) => {\r\n    event.preventDefault();\r\n    setIsPreloadDone(false);\r\n\r\n    const imageUrls = sectionData.map(section => section.items.map(item => item.imageUrl)).flat();\r\n    Promise.all(imageUrls.map(x => preloadImage(x)))\r\n        .then(() => {\r\n          setIsPreloadDone(true);\r\n        });\r\n  };\r\n\r\n  return (\r\n      <div>\r\n        <h1>Point Game</h1>\r\n        <div>\r\n          <Link to={'/train/all'}>Wszystkie działy</Link>\r\n        </div>\r\n        {sectionData ? sectionData.map(section =>\r\n            <div key={section.codeName}>\r\n              <Link to={`/train/${section.codeName}`}>{section.friendlyName}</Link>\r\n            </div>,\r\n        ) : ''}\r\n        <div>Jeśli nie szkoda ci internetu to dla płynniejszego działania aplikacji możesz na zapas pobrać z góry wszystkie\r\n          zdjęcia do pamięci podręcznej\r\n        </div>\r\n        <button onClick={handlePreloadImages}>Wczytaj obrazki</button>\r\n        {isPreloadDone === false ? <div>Wczytywanie obrazków...</div> : ''}\r\n        {isPreloadDone === true ? <div>Obrazki wczytane</div> : ''}\r\n      </div>\r\n  );\r\n}\r\n","import {useEffect, useRef, useState} from 'react';\r\nimport {Link, useParams} from 'react-router-dom';\r\nimport {isAnswerCorrect, preloadImage, shuffled} from '../utils';\r\nimport styles from './LearnRoute.module.scss';\r\n\r\nexport default function LearnRoute({sectionData}) {\r\n  const {sectionCodeName} = useParams();\r\n\r\n  const [toSolve, setToSolve] = useState(null);\r\n  const [solved, setSolved] = useState(null);\r\n  const [isShowingSolution, setIsShowingSolution] = useState(null);\r\n  const [isTextCorrect, setIsTextCorrect] = useState(null);\r\n  const [userAnswer, setUserAnswer] = useState('');\r\n\r\n  const userAnswerInput = useRef(null);\r\n\r\n  const [current] = toSolve ?? [];\r\n\r\n  // initialize component when sectionData or URL changes\r\n  useEffect(() => {\r\n    const itemWithSectionName = (section) => (item) => {\r\n      return {...item, sectionFriendlyName: section.friendlyName};\r\n    };\r\n\r\n    const setShuffledToSolve = (arr) => {\r\n      setToSolve(shuffled(arr));\r\n    };\r\n\r\n    if (sectionCodeName === 'all') {\r\n      setShuffledToSolve(sectionData.map(section => section.items.map(itemWithSectionName(section))).flat());\r\n    } else {\r\n      const section = sectionData.find(section => section.codeName === sectionCodeName);\r\n      if (section == null) {\r\n        setToSolve(null);\r\n        setSolved(null);\r\n        return;\r\n      }\r\n      setShuffledToSolve(section.items.map(itemWithSectionName(section)));\r\n    }\r\n    setSolved([]);\r\n    setIsTextCorrect(null);\r\n  }, [sectionCodeName, sectionData]);\r\n\r\n  // pre-fetch the next image\r\n  useEffect(() => {\r\n    if (toSolve) {\r\n      const next = toSolve[1];\r\n      if (next) {\r\n        preloadImage(next.imageUrl);\r\n      }\r\n    }\r\n  }, [toSolve]);\r\n\r\n  const handleGoNext = (event, isSuccess) => {\r\n    if (event) event.preventDefault();\r\n    if (isSuccess) {\r\n      setToSolve(toSolve.slice(1));\r\n      setSolved([...solved, current]);\r\n    } else {\r\n      if (toSolve.length > 1) {\r\n        setToSolve([...toSolve.slice(1, 2), current, ...toSolve.slice(2)]);\r\n      }\r\n    }\r\n    setIsShowingSolution(false);\r\n    setIsTextCorrect(null);\r\n    setUserAnswer('');\r\n    userAnswerInput.current.focus();\r\n  };\r\n  const handleAmRight = (event) => handleGoNext(event, true);\r\n  const handleAmWrong = (event) => handleGoNext(event, false);\r\n\r\n  if (toSolve == null) {\r\n    return (\r\n        <div>\r\n          Nie istnieje taka sekcja, wróć do <Link to=\"/\">strony głównej</Link>\r\n        </div>\r\n    );\r\n  }\r\n\r\n  if (current == null) {\r\n    return (\r\n        <div>\r\n          Brawo, zdałxś!!!!!!!! <button onClick={() => window.history.go(0)}> Zacznij od nowa</button> bądź\r\n          <Link to=\"/\"> przejdź do menu głównego</Link>, ewentualnie idź spać\r\n        </div>\r\n    );\r\n  }\r\n\r\n  const handleShowAnswer = (event) => {\r\n    if (event) event.preventDefault();\r\n    setIsShowingSolution(true);\r\n  };\r\n\r\n  const handleSubmitTextAnswer = (event) => {\r\n    event.preventDefault();\r\n    const isCorrect = isAnswerCorrect(current, userAnswer);\r\n    if (userAnswer !== '')\r\n      setIsTextCorrect(isCorrect);\r\n    else\r\n      handleShowAnswer();\r\n    if (isCorrect) {\r\n      if (isTextCorrect) { // if clicked enter again\r\n        handleGoNext(null, true);\r\n      }\r\n      handleShowAnswer();\r\n    }\r\n  };\r\n\r\n  const handleAnswerTextChanged = (event) => {\r\n    // hide 'correct' or 'incorrect' when the text input changes\r\n    setIsTextCorrect(null);\r\n    setUserAnswer(event.target.value);\r\n  };\r\n\r\n  return (\r\n      <div>\r\n        <div className={styles.imageGrid}>\r\n          <div className={styles.questImageContainer}>\r\n            <img src={current.imageUrl} alt=\"pytanie\"/>\r\n          </div>\r\n          {isShowingSolution ?\r\n              <div className={styles.answerImageContainer}>\r\n                {current.names.join(' | ')}\r\n              </div> :\r\n              ''}\r\n        </div>\r\n        <div>\r\n          {isShowingSolution ?\r\n              <>\r\n                <button onClick={handleAmRight}>Wiem</button>\r\n                <button onClick={handleAmWrong}>Nie wiem</button>\r\n              </> :\r\n              <>\r\n                <button onClick={handleShowAnswer}>Pokaż odpowiedź</button>\r\n              </>\r\n          }\r\n\r\n          <form className={styles.answerForm} onSubmit={handleSubmitTextAnswer}>\r\n            <input ref={userAnswerInput} type=\"text\" name=\"answer\" className={styles.input} onChange={handleAnswerTextChanged}\r\n                   value={userAnswer}/>\r\n            <button type=\"submit\">Sprawdź</button>\r\n          </form>\r\n          {isTextCorrect === true ? <span className={styles.good}>dobrze</span> : ''}\r\n          {isTextCorrect === false ? <span className={styles.bad}>źle</span> : ''}\r\n        </div>\r\n        <div>\r\n          wiesz: {solved.length} | nie wiesz: {toSolve.length}\r\n        </div>\r\n        <div>\r\n          <progress id=\"file\" max={solved.length + toSolve.length} value={solved.length} />\r\n        </div>\r\n      </div>\r\n  );\r\n}\r\n","import './App.css';\nimport {useEffect, useState} from 'react';\nimport {HashRouter, Redirect, Route, Switch} from 'react-router-dom';\nimport MainRoute from './components/MainRoute';\nimport TrainRoute from './components/LearnRoute';\n\nfunction App() {\n  const [sections, setSections] = useState(null);\n  const [sectionData, setSectionData] = useState();\n\n  const parseRows = (text) => {\n    const parser = new DOMParser();\n    const htmlDoc = parser.parseFromString(text, 'text/html');\n    const tbody = htmlDoc.querySelector('tbody');\n    return Array.from(tbody.children);\n  };\n\n  useEffect(() => {\n    fetch('/point-game/data/zzz_działy.html')\n        .then((r) => r.text())\n        .then(text => {\n          const data = parseRows(text).map(row => {\n            const rowElems = Array.from(row.querySelectorAll('td'));\n            return rowElems.map(elem => elem.textContent);\n          });\n          setSections(data);\n        });\n  }, []);\n\n  useEffect(() => {\n    if (sections)\n      Promise.all(sections.map(([, sectionSheetName]) => fetch(`/point-game/data/${sectionSheetName}.html`)))\n          .then(rs => Promise.all(rs.map(r => r.text())))\n          .then(sheets => {\n            return sheets.map(sheet => {\n                  return parseRows(sheet).slice(1).map(row => {\n                    const rowElems = Array.from(row.querySelectorAll('td'));\n                    const imageUrl = rowElems[0]\n                        .children.item(0)\n                        .children.item(0)\n                        .getAttribute('src')\n                        .replace(/=w\\d+-h\\d+$/, '');\n                    return {\n                      imageUrl,\n                      names: rowElems.slice(1).map(elem => elem.innerText),\n                    };\n                  });\n                },\n            );\n          })\n          .then(elementLists => {\n            return sections.map(([sectionCodeName, sectionFriendlyName], i) => {\n              return {\n                codeName: sectionCodeName,\n                friendlyName: sectionFriendlyName,\n                items: elementLists[i],\n              };\n            });\n          })\n          .then(data => {\n            setSectionData(data);\n          });\n  }, [sections]);\n\n  console.log(sectionData);\n\n  return (\n      <div className=\"App\">\n        {sectionData ?\n            (<HashRouter>\n              <Switch>\n                <Route path=\"/\" exact>\n                  <MainRoute sectionData={sectionData}/>\n                </Route>\n                <Route path=\"/train/:sectionCodeName\">\n                  <TrainRoute sectionData={sectionData}/>\n                </Route>\n                <Redirect to=\"/\"/>\n              </Switch>\n            </HashRouter>) :\n            <div>Pobieranie aktualnych danych</div>}\n      </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}