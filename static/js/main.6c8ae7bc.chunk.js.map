{"version":3,"sources":["components/LearnRoute.module.scss","components/MainRoute.js","utils.js","components/LearnRoute.js","App.js","reportWebVitals.js","index.js"],"names":["module","exports","MainRoute","sectionData","useState","isPreloadDone","setIsPreloadDone","to","map","section","codeName","friendlyName","onClick","event","preventDefault","imageUrls","items","item","imageUrl","flat","Promise","all","x","src","r","image","Image","onload","onerror","preloadImage","then","equalsIgnoreAccentAndCaseAndNonLetters","s1","s2","accents","cleanup","s","replaceAll","removeNonLetters","res","polish","normal","replacePolishAccent","toLowerCase","console","log","LearnRoute","sectionCodeName","useParams","toSolve","setToSolve","solved","setSolved","current","isSolution","setIsSolution","isTextCorrect","setIsTextCorrect","answerText","setAnswerText","answerInputRef","useRef","useFormik","useEffect","itemWithSectionName","sectionFriendlyName","setShuffledToSolve","arr","arrayToShuffle","randomIndex","array","currentIndex","length","Math","floor","random","shuffled","find","handleGoNext","isSuccess","slice","focus","window","history","go","handleShowAnswer","className","styles","imageGrid","questImageContainer","answerImageContainer","names","join","answerForm","onSubmit","goodAnswers1","goodAnswers2","name1","name2","goodAnswers3","goodAnswers","isCorrect","some","name","ref","type","input","onChange","target","value","good","bad","App","sections","setSections","setSectionData","parseRows","text","tbody","DOMParser","parseFromString","querySelector","Array","from","children","fetch","data","row","querySelectorAll","elem","textContent","sectionSheetName","rs","sheets","sheet","rowElems","getAttribute","replace","innerText","elementLists","i","path","exact","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.6c8ae7bc.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"imageGrid\":\"LearnRoute_imageGrid__39iJh\",\"questImageContainer\":\"LearnRoute_questImageContainer__3VCF3\",\"answerImageContainer\":\"LearnRoute_answerImageContainer__35uX4\",\"input\":\"LearnRoute_input__3nB-G\",\"result\":\"LearnRoute_result__3Yo_M\",\"good\":\"LearnRoute_good__EVANt LearnRoute_result__3Yo_M\",\"bad\":\"LearnRoute_bad__1tRC3 LearnRoute_result__3Yo_M\",\"answerForm\":\"LearnRoute_answerForm__28i-N\"};","import {Link} from 'react-router-dom';\r\nimport {useState} from 'react';\r\n\r\nexport default function MainRoute({sectionData}) {\r\n  const [isPreloadDone, setIsPreloadDone] = useState(null);\r\n\r\n  const handlePreloadImages = (event) => {\r\n    event.preventDefault();\r\n    setIsPreloadDone(false);\r\n\r\n    const preloadImage = src =>\r\n        new Promise(r => {\r\n          const image = new Image();\r\n          image.onload = r;\r\n          image.onerror = r;\r\n          image.src = src;\r\n        });\r\n\r\n    const imageUrls = sectionData.map(section => section.items.map(item => item.imageUrl)).flat();\r\n    Promise.all(imageUrls.map(x => preloadImage(x.src)))\r\n        .then(() => {\r\n          setIsPreloadDone(true);\r\n        });\r\n  };\r\n\r\n  return (\r\n      <div>\r\n        <h1>Point Game</h1>\r\n        <div>\r\n          <Link to={'/train/all'}>Wszystkie działy</Link>\r\n        </div>\r\n        {sectionData ? sectionData.map(section =>\r\n            <div key={section.codeName}>\r\n              <Link to={`/train/${section.codeName}`}>{section.friendlyName}</Link>\r\n            </div>,\r\n        ) : ''}\r\n        <div>Jeśli nie szkoda ci internetu to dla płynniejszego działania aplikacji możesz na zapas pobrać z góry wszystkie\r\n          zdjęcia do pamięci podręcznej\r\n        </div>\r\n        <button onClick={handlePreloadImages}>Wczytaj obrazki</button>\r\n        {isPreloadDone === false ? <div>Wczytywanie obrazków...</div> : ''}\r\n        {isPreloadDone === true ? <div>Obrazki wczytane</div> : ''}\r\n      </div>\r\n  );\r\n}\r\n","// adapted from and edited https://stackoverflow.com/a/2450976/4541480\r\nexport function shuffled(arrayToShuffle) {\r\n  const array = [...arrayToShuffle];\r\n  let currentIndex = array.length, randomIndex;\r\n\r\n  // While there remain elements to shuffle...\r\n  while (currentIndex !== 0) {\r\n\r\n    // Pick a remaining element...\r\n    randomIndex = Math.floor(Math.random() * currentIndex);\r\n    currentIndex--;\r\n\r\n    // And swap it with the current element.\r\n    [array[currentIndex], array[randomIndex]] = [\r\n      array[randomIndex], array[currentIndex]];\r\n  }\r\n\r\n  return array;\r\n}\r\n\r\nexport function equalsIgnoreAccentAndCaseAndNonLetters(s1, s2) {\r\n  const accents = [['ą', 'a'], ['ć', 'c'], ['ę', 'e'], ['ł', 'l'], ['ń', 'n'], ['ó', 'o'], ['ś', 's'], ['ź', 'z'], ['ż', 'z']];\r\n\r\n  const replacePolishAccent = (s) => {\r\n    let res = s;\r\n    for (const [polish, normal] of accents) {\r\n      res = res.replaceAll(polish, normal);\r\n    }\r\n    return res;\r\n  };\r\n\r\n  const removeNonLetters = (s) => s.replaceAll(/[^a-z ]/g, \"\")\r\n\r\n  const cleanup = (s) => removeNonLetters(replacePolishAccent(s.toLowerCase()))\r\n\r\n  console.log(s2, cleanup(s2))\r\n\r\n  return cleanup(s1) === cleanup(s2);\r\n}\r\n","import {useEffect, useRef, useState} from 'react';\r\nimport {Link, useParams} from 'react-router-dom';\r\nimport {equalsIgnoreAccentAndCaseAndNonLetters, shuffled} from '../utils';\r\nimport styles from './LearnRoute.module.scss';\r\nimport {Form, Field, Formik, useFormik} from 'formik';\r\n\r\nexport default function LearnRoute({sectionData}) {\r\n  const {sectionCodeName} = useParams();\r\n\r\n  const [toSolve, setToSolve] = useState(null);\r\n  const [solved, setSolved] = useState(null);\r\n\r\n  const [current] = toSolve ?? [];\r\n  const [isSolution, setIsSolution] = useState(null);\r\n  const [isTextCorrect, setIsTextCorrect] = useState(null);\r\n\r\n  const [answerText, setAnswerText] = useState('');\r\n  const answerInputRef = useRef(null);\r\n\r\n  const formik = useFormik({});\r\n\r\n  console.log(toSolve);\r\n\r\n  // initialize component with\r\n  useEffect(() => {\r\n    const itemWithSectionName = (section) => (item) => {\r\n      return {...item, sectionFriendlyName: section.friendlyName};\r\n    };\r\n\r\n    const setShuffledToSolve = (arr) => {\r\n      setToSolve(shuffled(arr));\r\n    };\r\n\r\n    if (sectionCodeName === 'all') {\r\n      setShuffledToSolve(sectionData.map(section => section.items.map(itemWithSectionName(section))).flat());\r\n    } else {\r\n      const section = sectionData.find(section => section.codeName === sectionCodeName);\r\n      if (section == null) {\r\n        setToSolve(null);\r\n        setSolved(null);\r\n        return;\r\n      }\r\n      setShuffledToSolve(section.items.map(itemWithSectionName(section)));\r\n    }\r\n    setSolved([]);\r\n    setIsTextCorrect(null);\r\n  }, [sectionCodeName, sectionData]);\r\n\r\n  const handleGoNext = (event, isSuccess) => {\r\n    if (event) event.preventDefault();\r\n    if (isSuccess) {\r\n      setToSolve(toSolve.slice(1));\r\n      setSolved([...solved, current]);\r\n    } else {\r\n      if (toSolve.length > 1) {\r\n        setToSolve([...toSolve.slice(1, 2), current, ...toSolve.slice(2)]);\r\n      }\r\n    }\r\n    setIsSolution(false);\r\n    setIsTextCorrect(null);\r\n    setAnswerText('');\r\n    answerInputRef.current.focus();\r\n  };\r\n  const handleCorrect = (event) => handleGoNext(event, true);\r\n  const handleIncorrect = (event) => handleGoNext(event, false);\r\n\r\n  if (toSolve == null) {\r\n    return (\r\n        <div>\r\n          Nie istnieje taka sekcja, wróć do <Link to=\"/\">strony głównej</Link>\r\n        </div>\r\n    );\r\n  }\r\n\r\n  if (current == null) {\r\n    return <div>\r\n      Brawo, zdałxś!!!!!!!! <button\r\n        onClick={() => window.history.go(0)}>\r\n      Zacznij od nowa</button> bądź <Link to=\"/\">przejdź do menu głównego</Link>, ewentualnie idź spać\r\n    </div>;\r\n  }\r\n\r\n  const handleShowAnswer = (event) => {\r\n    if (event) event.preventDefault();\r\n    setIsSolution(true);\r\n  };\r\n\r\n  const handleSubmitTextAnswer = (event) => {\r\n    event.preventDefault();\r\n    const goodAnswers1 = current.names;\r\n    const goodAnswers2 = goodAnswers1.map(name1 => current.names.map(name2 => `${name1} ${name2}`)).flat();\r\n    const goodAnswers3 = goodAnswers2.map(name1 => current.names.map(name2 => `${name1} ${name2}`)).flat();\r\n    const goodAnswers = [...goodAnswers1, ...goodAnswers2, ...goodAnswers3];\r\n\r\n    console.log(goodAnswers);\r\n\r\n    const isCorrect = goodAnswers.some(name => equalsIgnoreAccentAndCaseAndNonLetters(name, answerText));\r\n    if (answerText !== '')\r\n      setIsTextCorrect(isCorrect);\r\n    else\r\n      handleShowAnswer()\r\n    if (isCorrect) {\r\n      if (isTextCorrect) { // if clicked enter again\r\n        handleGoNext(null, true);\r\n      }\r\n      handleShowAnswer();\r\n    }\r\n  };\r\n\r\n  const handleAnswerTextChanged = (event) => {\r\n    setIsTextCorrect(null);\r\n    setAnswerText(event.target.value);\r\n  };\r\n\r\n  return (\r\n      <div>\r\n        <div className={styles.imageGrid}>\r\n          <div className={styles.questImageContainer}>\r\n            <img src={current.imageUrl}/>\r\n          </div>\r\n          {isSolution ?\r\n              <div className={styles.answerImageContainer}>\r\n                {current.names.join(' | ')}\r\n              </div> :\r\n              ''}\r\n        </div>\r\n        <div>\r\n          {isSolution ?\r\n              <>\r\n                <button onClick={handleCorrect}>Wiem</button>\r\n                <button onClick={handleIncorrect}>Nie wiem</button>\r\n              </> :\r\n              <>\r\n                <button onClick={handleShowAnswer}>Pokaż odpowiedź</button>\r\n              </>\r\n          }\r\n\r\n          <form className={styles.answerForm} onSubmit={handleSubmitTextAnswer}>\r\n            <input ref={answerInputRef} type=\"text\" name=\"answer\" className={styles.input} onChange={handleAnswerTextChanged} value={answerText}/>\r\n            <button type=\"submit\">Sprawdź</button>\r\n          </form>\r\n          {isTextCorrect === true ? <span className={styles.good}>dobrze</span> : ''}\r\n          {isTextCorrect === false ? <span className={styles.bad}>źle</span> : ''}\r\n        </div>\r\n        <div>\r\n          wiesz: {solved.length} | nie wiesz: {toSolve.length}\r\n        </div>\r\n      </div>\r\n  );\r\n}\r\n","import './App.css';\nimport {useEffect, useState} from 'react';\nimport {HashRouter, Redirect, Route, Switch} from 'react-router-dom';\nimport MainRoute from './components/MainRoute';\nimport TrainRoute from './components/LearnRoute';\n\nfunction App() {\n  const [sections, setSections] = useState(null);\n  const [sectionData, setSectionData] = useState();\n\n  const parseRows = (text) => {\n    const parser = new DOMParser();\n    const htmlDoc = parser.parseFromString(text, 'text/html');\n    const tbody = htmlDoc.querySelector('tbody');\n    return Array.from(tbody.children);\n  };\n\n  useEffect(() => {\n    fetch('/point-game/data/zzz_działy.html')\n        .then((r) => r.text())\n        .then(text => {\n          const data = parseRows(text).map(row => {\n            const rowElems = Array.from(row.querySelectorAll('td'));\n            return rowElems.map(elem => elem.textContent);\n          });\n          setSections(data);\n        });\n  }, []);\n\n  useEffect(() => {\n    if (sections)\n      Promise.all(sections.map(([, sectionSheetName]) => fetch(`/point-game/data/${sectionSheetName}.html`)))\n          .then(rs => Promise.all(rs.map(r => r.text())))\n          .then(sheets => {\n            return sheets.map(sheet => {\n                  return parseRows(sheet).slice(1).map(row => {\n                    const rowElems = Array.from(row.querySelectorAll('td'));\n                    const imageUrl = rowElems[0]\n                        .children.item(0)\n                        .children.item(0)\n                        .getAttribute('src')\n                        .replace(/=w\\d+-h\\d+$/, '');\n                    return {\n                      imageUrl,\n                      names: rowElems.slice(1).map(elem => elem.innerText),\n                    };\n                  });\n                },\n            );\n          })\n          .then(elementLists => {\n            return sections.map(([sectionCodeName, sectionFriendlyName], i) => {\n              return {\n                codeName: sectionCodeName,\n                friendlyName: sectionFriendlyName,\n                items: elementLists[i],\n              };\n            });\n          })\n          .then(data => {\n            setSectionData(data);\n          });\n  }, [sections]);\n\n  console.log(sectionData);\n\n  return (\n      <div className=\"App\">\n        {sectionData ?\n            (<HashRouter>\n              <Switch>\n                <Route path=\"/\" exact>\n                  <MainRoute sectionData={sectionData}/>\n                </Route>\n                <Route path=\"/train/:sectionCodeName\">\n                  <TrainRoute sectionData={sectionData}/>\n                </Route>\n                <Redirect to=\"/\"/>\n              </Switch>\n            </HashRouter>) :\n            <div>Pobieranie aktualnych danych</div>}\n      </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}